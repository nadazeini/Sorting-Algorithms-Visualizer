{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getHeapSortAnimations","n","buildMaxHeap","swap","doHeapSort","console","log","largest","left_child","right_child","a","temp","SortingVisualizer","props","state","array_length","speed","val","this","setState","resetArray","min","max","random","window","location","reload","document","getElementById","disabled","title","bar_size","len","className","id","value","onChange","e","toggle_length","target","name","type","role","aria-label","onClick","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","btnClickFast","bind","btnClickNormal","btnClickSlow","seeAnother","mergeSort","quickSort","heapSort","ref","bubbleSort","selectionSort","inserstionSort","map","idx","key","style","height","width","textcontent","fontSize","color","display","disableButtons","arrayBars","getElementsByClassName","arrayBarsWithNo","numbersBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","barOneStyleNo","barTwoStyleNo","setTimeout","backgroundColor","newHeight","newH","toString","replace","textContent","auxArray","tmp","doBubbleSort","getBubbleSortAnimations","animateAlgo","doInsertionSort","getInsertionSortAnimations","min_index","doSelectionSort","getSelectionSortAnimations","React","Component","$","ready","click","html","text","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a82f602.chunk.js","sourcesContent":["/* Merge Sort\n ******************************************************************************************************************************************************************************************************************************************************************************************************************** */\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) \n    return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) \n    return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([\n        k, auxiliaryArray[i]\n      ]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([\n        k, auxiliaryArray[j]\n      ]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([\n      k, auxiliaryArray[i]\n    ]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([\n      k, auxiliaryArray[j]\n    ]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n/* Bubble Sort\n ******************************************************************************************************************************************************************************************************************************************************************************************************************** */\nexport function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxArray = array.slice();\n  doBubbleSort(auxArray, animations);\n  array = auxArray;\n  return animations;\n}\n\nfunction doBubbleSort(auxArray, animations) {\n  for (let i = 0; i < auxArray.length - 1; i++) {\n    for (let j = 0; j < auxArray.length - 1 - i; j++) {\n      //push once to color\n      animations.push([\n        j, j + 1\n      ]);\n      //push second time to uncolor?\n      animations.push([\n        j, j + 1\n      ]);\n      if (auxArray[j] > auxArray[j + 1]) {\n        //swap\n        animations.push([\n          j + 1,\n          auxArray[j]\n        ]);\n        animations.push([\n          j,\n          auxArray[j + 1]\n        ]);\n\n        let tmp = auxArray[j + 1];\n        auxArray[j + 1] = auxArray[j];\n        auxArray[j] = tmp;\n      } else {\n        // if -1 then there was no swap\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n        //not sure if twice\n      }\n    }\n  }\n}\n/* Insertion Sort\n ******************************************************************************************************************************************************************************************************************************************************************************************************************** */\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  //let auxArray = array.slice();\n  doInsertionSort(array, animations);\n  //array = auxArray;  not needed but will see\n  return animations;\n}\n\nfunction doInsertionSort(array, animations) {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i; j > 0; j--) {\n      if (array[j] < array[j - 1]) {\n        animations.push([\n          j, j - 1\n        ]);\n        animations.push([\n          j, j - 1\n        ]);\n        animations.push([\n          j - 1,\n          array[j]\n        ]);\n        animations.push([\n          j,\n          array[j - 1]\n        ]);\n        let temp = array[j];\n        array[j] = array[j - 1];\n        array[j - 1] = temp;\n      }\n    }\n  }\n}\n/* Selection Sort\n/******************************************************************************************************************************************************************************************************************************************************************************************************************** */\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  doSelectionSort(array, animations);\n  return animations;\n}\n\nfunction doSelectionSort(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    let min_index = i;\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([min_index, j]); //color\n      animations.push([min_index, j]); //uncolor\n      animations.push([\n        0, array[0]\n      ]);\n      animations.push([\n        0, array[0]\n      ]);\n      if (array[j] < array[min_index]) {\n        min_index = j;\n      }\n    }\n    animations.push([i, min_index]);\n    animations.push([i, min_index]);\n    animations.push([\n      i, array[min_index]\n    ]);\n    animations.push([\n      min_index, array[i]\n    ]);\n    let temp = array[min_index];\n    array[min_index] = array[i];\n    array[i] = temp;\n  }\n}\n/* Heap Sort\n ******************************************************************************************************************************************************************************************************************************************************************************************************************** */\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  doHeapSort(array, animations);\n  console.log(animations);\n  return animations;\n}\n\nfunction doHeapSort(array, animations) {\n  let n = array.length;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    buildMaxHeap(array, n, i, animations);\n  }\n  //remove root node\n  for (let j = n - 1; j > 0; j--) {\n    swap(array, 0, j, animations);\n\n    //heapify the reduced heap\n    n--;\n    buildMaxHeap(array, n, 0, animations);\n  }\n}\n\nfunction buildMaxHeap(array, n, i, animations) {\n  let largest = i;\n  let left_child = i * 2 + 1;\n  let right_child = i * 2 + 2;\n\n  if (left_child < n && array[left_child] > array[largest]) {\n    //console.log(left_child);\n    //console.log(right_child);\n    //console.log(animations);\n    animations.push([left_child, largest]); //color 2 bars\n    animations.push([left_child, largest]); //uncolor them\n    animations.push([\n      0, array[0]\n    ]);\n    animations.push([\n      0, array[0]\n    ]);\n    largest = left_child;\n  }\n  if (right_child < n && array[right_child] > array[largest]) {\n    animations.push([right_child, largest]); //color 2 bars\n    animations.push([right_child, largest]);\n    animations.push([\n      0, array[0]\n    ]);\n    animations.push([\n      0, array[0]\n    ]);\n    largest = right_child;\n  }\n  if (largest !== i) {\n    //not equal to root\n    //then we swap\n    /*  let temp = array[i];\n                                                                                                                array[i] = array[largest];\n                                                                                                                array[largest] = temp;\n                                                                                                            */\n    swap(array, i, largest, animations);\n    //heapidy the subtree\n    buildMaxHeap(array, n, largest, animations);\n  }\n}\n\nfunction swap(a, i, j, animations) {\n  animations.push([i, j]);\n  animations.push([i, j]);\n  animations.push([\n    i, a[j]\n  ]); //swapped in bars\n  animations.push([\n    j, a[i]\n  ]); //swapped in bars\n  let temp = a[i];\n  a[i] = a[j];\n  a[j] = temp;\n}\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {getMergeSortAnimations, getBubbleSortAnimations, getInsertionSortAnimations, getSelectionSortAnimations, getHeapSortAnimations} from \"../SortingAlgorithms/sortingAlgorithms.js\";\nimport $ from \"jquery\";\nconst PRIMARY_COLOR = \"rgb(255, 198, 92)\";\nconst SECONDARY_COLOR = \"purple\";\nconst THIRD_COLOR = \"rgb(255, 198, 92)\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.selectSpeed = this.selectSpeed.bind(this);\n    this.state = {\n      array: [],\n      array_length: 34, //props.array_length,\n      speed: 1\n    };\n    // this.toggle_length = this.toggle_length.bind(this);\n  }\n  toggle_length(val) {\n    //console.log(val);\n    this.setState({array_length: val});\n    this.resetArray();\n  }\n  componentDidMount() {\n    //first time loading\n    this.resetArray();\n  }\n  resetArray() {\n    //creates array\n    const array = [];\n    // let len = this.state.array_length;\n\n    for (let i = 0; i < this.state.array_length; i++) {\n      array.push(randomInt(10, 500));\n    }\n    this.setState({array});\n  }\n  seeAnother() {\n    window.location.reload();\n  }\n  btnClickSlow() {\n    this.setState({speed: 200});\n  }\n  btnClickFast() {\n    this.setState({speed: 1});\n  }\n\n  btnClickNormal() {\n    this.setState({speed: 80});\n  }\n  disableButtons() {\n    document.getElementById(\"shuffle\").disabled = true;\n    document.getElementById(\"speed\").disabled = true;\n    document.getElementById(\"quick\").disabled = true;\n    document.getElementById(\"bubble\").disabled = true;\n    document.getElementById(\"selection\").disabled = true;\n    document.getElementById(\"insertion\").disabled = true;\n    document.getElementById(\"heap\").disabled = true;\n    document.getElementById(\"merge\").disabled = true;\n    document.getElementById(\"slider\").disabled = true;\n    document.getElementById(\"shuffle\").title = \"Click See Another\";\n    document.getElementById(\"speed\").title = \"Click See Another\";\n    document.getElementById(\"quick\").title = \"Click See Another\";\n    document.getElementById(\"bubble\").title = \"Click See Another\";\n    document.getElementById(\"selection\").title = \"Click See Another\";\n    document.getElementById(\"insertion\").title = \"Click See Another\";\n    document.getElementById(\"heap\").title = \"Click See Another\";\n    document.getElementById(\"merge\").title = \"Click See Another\";\n    document.getElementById(\"slider\").title = \"Click See Another\";\n  }\n  enableButtons() {\n    document.getElementById(\"shuffle\").disabled = false;\n    document.getElementById(\"speed\").disabled = false;\n    document.getElementById(\"quick\").disabled = false;\n    document.getElementById(\"bubble\").disabled = false;\n    document.getElementById(\"selection\").disabled = false;\n    document.getElementById(\"insertion\").disabled = false;\n    document.getElementById(\"heap\").disabled = false;\n    document.getElementById(\"merge\").disabled = false;\n    document.getElementById(\"slider\").disabled = false;\n  }\n  render() {\n    const {array} = this.state;\n    //if array len is between is less or equal to 37\n    let bar_size = \"\";\n    const len = this.state.array_length;\n    let font_size = \"\";\n\n    //make a function later\n    //can be automated\n    if (len <= 33) {\n      bar_size = \"30px\";\n    }\n    if (len > 33 && len < 37) {\n      bar_size = \"28px\";\n    }\n    if (len >= 37 && len <= 40) {\n      bar_size = \"25px\";\n    }\n    if (len > 40 && len <= 43) {\n      bar_size = \"22px\";\n    }\n    if (len > 43 && len <= 47) {\n      bar_size = \"20px\";\n    }\n    if (len > 47 && len <= 50) {\n      bar_size = \"18px\";\n    }\n    if (len > 50 && len <= 53) {\n      bar_size = \"17px\";\n    }\n    if (len > 53 && len <= 58) {\n      bar_size = \"16px\";\n    }\n    if (len > 58 && len <= 64) {\n      bar_size = \"14px\";\n    }\n    if (len > 64 && len <= 66) {\n      bar_size = \"13px\";\n    }\n    if (len > 66 && len <= 72) {\n      bar_size = \"12px\";\n    }\n    if (len > 72 && len <= 80) {\n      bar_size = \"11px\";\n    }\n    if (len > 80 && len <= 90) {\n      bar_size = \"10px\";\n    }\n    if (len > 90 && len <= 100) {\n      bar_size = \"9px\";\n    }\n    if (len > 100 && len <= 120) {\n      bar_size = \"7px\";\n    }\n    if (len > 120 && len <= 137) {\n      bar_size = \"6px\";\n    }\n    if (len > 137 && len <= 150) {\n      bar_size = \"5px\";\n    }\n    if (len > 150 && len <= 183) {\n      bar_size = \"4px\";\n    }\n    if (len > 183 && len <= 220) {\n      bar_size = \"3px\";\n    }\n    if (len > 220 && len <= 280) {\n      bar_size = \"2px\";\n    }\n    return (<div className=\"container\">\n      <div className=\"nav-bar\">\n        <div className=\"row justify-content-center pb-3 \">\n          <div className=\"col-md-3 \">\n            <div className=\"slider row justify-content-center\">\n              <label className=\"boot-color\">Number of Bars</label>\n              <input id=\"slider\" className=\"slider1 custom-range\" value={this.state.array_length} onChange={e => this.toggle_length(e.target.value)} name=\"arraySize\" type=\"range\" min=\"5\" max=\"275\"/>\n            </div>\n          </div>\n        </div>\n        <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\n          <button id=\"shuffle\" type=\"button\" className=\"btn btn-secondary boot-background boot-color boot-hover\" onClick={() => this.resetArray()}>\n            Shuffle\n          </button>\n          <div className=\"dropdown\">\n            <button className=\" dropdownMenuButton btn btn-secondary dropdown-toggle boot-background boot-color boot-hover\" type=\"button\" id=\"speed\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Fast\n              <span className=\"caret\"/>\n            </button>\n            <div className=\"dropdown-menu boot-background boot-color \" aria-labelledby=\"dropdownMenuButton\">\n              <button className=\"btn btn-secondary dropdown-item boot-background boot-color boot-hover \" value=\"3\" onClick={this.btnClickFast.bind(this)}>\n                Fast\n              </button>\n              <button className=\"btn btn-secondary dropdown-item boot-background boot-color boot-hover \" value=\"60\" onClick={this.btnClickNormal.bind(this)}>\n                Normal\n              </button>\n              <button className=\"btn btn-secondary dropdown-item boot-background boot-color  boot-hover\" value=\"200\" onClick={this.btnClickSlow.bind(this)}>\n                Slow\n              </button>\n            </div>\n          </div>\n          <button id=\"try\" type=\"button\" className=\"btn btn-secondary boot-background boot-color boot-hover\" onClick={() => this.seeAnother()}>\n            See Another\n          </button>\n        </div>\n\n        <button type=\"button\" id=\"merge\" className=\"btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.mergeSort()}>\n          Merge Sort\n        </button>\n        <button type=\"button\" id=\"quick\" className=\"btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.quickSort()}>\n          Quick Sort\n        </button>\n        <button type=\"button\" id=\"heap\" className=\"btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.heapSort()}>\n          Heap Sort\n        </button>\n        <button type=\"button\" ref=\"btn\" id=\"bubble\" className=\"stop-propagation btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.bubbleSort()}>\n          Bubble Sort\n        </button>\n        <button type=\"button\" id=\"selection\" className=\"btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.selectionSort()}>\n          Selection Sort\n        </button>\n        <button type=\"button\" id=\"insertion\" className=\"btn btn-outline-secondary boot-background boot-color boot-hover\" onClick={() => this.inserstionSort()}>\n          Insertion Sort\n        </button>\n      </div>\n\n      {\n        array.map((value, idx) => (<div className=\"array-container\" key={idx}>\n          <div className=\"array-bar\" style={{\n              height: `${value}px`,\n              width: bar_size\n            }}/>\n          <div className=\"numbers\" id=\"numbers\" textcontent={value} style={this.state.array_length <= 37\n              ? {\n                fontSize: \"px 1\",\n                color: \"white\"\n              }\n              : {\n                display: \"none\"\n              }\n}>\n            {value}\n          </div>\n        </div>))\n      }\n    </div>);\n  }\n\n  //MERGE SORT\n  //******************************************************************************************************************************************************************************************************************************************************************************************************************** */\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    this.disableButtons();\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const arrayBarsWithNo = document.getElementsByClassName(\"array-container\");\n      const numbersBars = document.getElementsByClassName(\"numbers\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const barOneStyleNo = arrayBarsWithNo[barOneIdx].style;\n        const barTwoStyleNo = arrayBarsWithNo[barTwoIdx].style;\n        const color = i % 3 === 0\n          ? SECONDARY_COLOR\n          : THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          barOneStyleNo.backgroundColor = color;\n          barTwoStyleNo.backgroundColor = color;\n          //num1.textContent = num2Text;\n          //num2.textContent = num1.textContent;\n        }, i * this.state.speed);\n      } else {\n        //console.log(numbersBars[barOneIdx]);\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          let newH = newHeight;\n          newH = newH.toString().replace(\"px\", \"\");\n          numbersBars[barOneIdx].textContent = newH;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  }\n\n  //BUBBLE SORT\n  //******************************************************************************************************************************************************************************************************************************************************************************************************************** */\n  bubbleSort() {\n    this.disableButtons();\n    let array = this.state.array;\n    let animations = getBubbleSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const arrayBarsWithNo = document.getElementsByClassName(\"array-container\");\n      const numbersBars = document.getElementsByClassName(\"numbers\");\n      //color change is on ever 4 indexes: 0, 4, 8 ...\n      const colorChange = i % 4 === 0 || i % 4 === 1;\n      if (colorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const barOneStyleNo = arrayBarsWithNo[barOneIdx].style;\n        const barTwoStyleNo = arrayBarsWithNo[barTwoIdx].style;\n\n        setTimeout(() => {\n          const color = i % 4 === 0\n            ? SECONDARY_COLOR\n            : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          barOneStyleNo.backgroundColor = color;\n          barTwoStyleNo.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        const [barOneIdx, newHeight] = animations[i];\n        if (barOneIdx === -1) {\n          continue;\n        }\n        const barOneStyle = arrayBars[barOneIdx].style;\n        let newH = newHeight;\n        newH = newH.toString().replace(\"px\", \"\");\n\n        //console.log(numbersBars[barOneIdx]);\n        setTimeout(() => {\n          numbersBars[barOneIdx].textContent = newH;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  }\n  //******************************************************************************************************************************************************************************************************************************************************************************************************************** */\n  inserstionSort() {\n    this.animateAlgo(getInsertionSortAnimations(this.state.array));\n  }\n  selectionSort() {\n    this.animateAlgo(getSelectionSortAnimations(this.state.array));\n  }\n  heapSort() {\n    this.animateAlgo(getHeapSortAnimations(this.state.array));\n  }\n  quickSort() {}\n\n  animateAlgo(animations) {\n    this.disableButtons();\n    // let array = this.state.array;\n    //const animations = animation;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const arrayBarsWithNo = document.getElementsByClassName(\"array-container\");\n      const numbersBars = document.getElementsByClassName(\"numbers\");\n      //color change is on ever 4 indexes: 0, 4, 8 ...\n      const colorChange = i % 4 <= 1;\n      if (colorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const barOneStyleNo = arrayBarsWithNo[barOneIdx].style;\n        const barTwoStyleNo = arrayBarsWithNo[barTwoIdx].style;\n        const color = i % 4 === 0\n          ? SECONDARY_COLOR\n          : THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          barOneStyleNo.backgroundColor = color;\n          barTwoStyleNo.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        const [, newHeight] = animations[i];\n        // /const barOneStyle = arrayBars[barOneIdx].style;\n        let newH = newHeight;\n        newH = newH.toString().replace(\"px\", \"\");\n        //console.log(numbersBars[barOneIdx]);\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          numbersBars[barOneIdx].textContent = newH; //\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n//takes care of drop down button: changes text when you change speed\n$(document).ready(function () {\n  $(\".dropdown-menu  button\").click(function () {\n    $(\".dropdownMenuButton:first-child\").html($(this).text() + ' <span class=\"caret\"></span>');\n  });\n});\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<SortingVisualizer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(< App / >, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}